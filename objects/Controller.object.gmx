<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = irandom_range(3, 5) * room_speed;
instance_activate_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room) {
    case r1_menu:
        if(keyboard_check_pressed(vk_enter)) room_goto_next();
        break;
    case r2_pigHunt:
        if(random(300) &lt; 10) {
            with(instance_create(room_width, irandom(room_height - 48), Pig)) {
                move_snap(1, 96);
            }
        }
        timer -= 1;
        if(!timer || keyboard_check_pressed(ord("8"))) {
            room_goto_next();
        }
        break;
    case r3_pigResult: case r5_raceResult:
        if(keyboard_check_pressed(vk_enter)) {
            room_goto_next();
        }
        break;
    case r4_race:
        if(instance_exists(PlayerRace)) {
            if(keyboard_check_pressed(vk_space) &amp;&amp; !instance_exists(Rock)) {
                with(instance_create(PlayerRace.x, PlayerRace.y, Rock)) {
                    target = instance_furthest(0, room_height, EnemyRace);
                }
            }
        }
        timer -= 1;
        if(!timer) {
            watching = !watching;
            timer = irandom_range(3, 5) * room_speed;
        }
        break;
    case r6_memory:
        if(timer) {
            timer -= 1;
            if(!timer) {
                Card.image_index = 1;
            }
        } else {
            var i;
            i = 0;
            with(Card) {
                if(image_index == 0) {
                    i += 1;
                }
            }
            if(i == instance_number(Card) &amp;&amp; !won) {
                show_message("YOU WIN!");
                won = true;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room) {
    case r2_pigHunt:
        timer = 60 * room_speed;
        break;
    case r4_race:
        instance_deactivate_all(true);
        alarm[0] = 30 * 3;
        break;
    case r6_memory:
        var items;
        items = ds_list_create();
        repeat(2) {
            ds_list_add(items, sSpecs);
            ds_list_add(items, sFire);
            ds_list_add(items, sLotF);
            ds_list_add(items, sConch);
            ds_list_add(items, sSnake);
            ds_list_add(items, sIsland);
        }
        ds_list_shuffle(items);
        with(Card) {
            design = ds_list_find_value(items, 0);
            ds_list_delete(items, 0);
        }
        ds_list_destroy(items);
        timer = 0.3 * room_speed;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

globalvar pigsKilled, pigsEscaped;
timer = 0;

pigsKilled = 0;
pigsEscaped = 0;

watching = true;
splashRed = false;

globalvar hitWatched, hitNotWatched;
hitWatched = 0;
hitNotWatched = 0;

cardClicked = noone;
errors = 0;
won = false;

sound_loop(aBackground);

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fKristenITC);
switch(room) {
    case r1_menu:
        draw_set_halign(fa_right);
        draw_text(room_width - 32, room_height - 32, "Press &lt;Enter&gt; to begin");
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        break;
    case r6_memory:
        draw_text(32, 32, "Mistakes: " + string(errors));
        break;
    case r3_pigResult:
        var pigPercent;
        pigPercent = (pigsKilled / max(1, pigsKilled + pigsEscaped));
        draw_set_color(make_color_rgb(pigPercent * 225, 225 - (pigPercent * 225), 0));
        draw_rectangle(0, 0, room_width, room_height, false);
        draw_set_color(make_color_rgb(200, 200, 230));
        draw_text(32, 64, "Pigs killed: " + string(pigsKilled));
        draw_text(32, 96, "Pigs passed: " + string(pigsEscaped));
        draw_text(32, 128, "Percentage killed: " + string(round(pigPercent * 100)) + "%");
        draw_text(32, 160, "Press &lt;Enter&gt; to continue");
        break;
    case r4_race:
        if(splashRed) {
            draw_set_alpha(splashRed);
            draw_set_color(c_red);
            draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
            draw_set_alpha(1);
            splashRed -= 0.1;
        }
        if(watching) {
            draw_sprite(sEyes, 0, 32, 32);
        }
        if(alarm[0]) {
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_set_color(c_black);
            draw_text_transformed(view_wview[0] / 2, view_hview[0] / 2, string(ceil(alarm[0] / room_speed)), 3, 3, 0);
            draw_set_halign(fa_left);
            draw_set_valign(fa_bottom);
        }
        break;
    case r5_raceResult:
        var hitPercent;
        hitPercent = (hitNotWatched / max(1, hitNotWatched + hitWatched));
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        draw_set_color(make_color_rgb(hitPercent * 225, 225 - (hitPercent * 225), 0));
        draw_rectangle(0, 0, room_width, room_height, false);
        draw_set_color(make_color_rgb(200, 200, 230));
        draw_text(32, 64, "Hit while watched: " + string(hitWatched));
        draw_text(32, 96, "Hit while not watched: " + string(hitNotWatched));
        draw_text(32, 128, "Percentage hit while not watched: " + string(round(hitPercent * 100)) + "%");
        draw_text(32, 160, "Press &lt;Enter&gt; to continue");
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
